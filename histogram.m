close all; clear all;clc;

I = imread('test.bmp');
aviobj = avifile('mymovie.avi','fps',10); 


figure;imshow(I);
frequency = imhist(I);
h = imhist(I);
hold on;
figure;
imhist(I);
hold off;
%title('Histogram of the image' );
xlabel('Intensity value');
ylabel('Frequency');
axis([0 255 0 10000]); 
[r, c] = size(I);
k = 1;
for i=1:length(frequency)
    
    points(k, 1) = i;
    points(k, 2) = frequency(i);
    points(k, 3) = 0;
    k=k+1;
end

points = normalize(points, r, c);


points(1, 1) = 0;
points(length(points), 1) = 255;

it = 1;
f=uint8(1);
hold on
close all;
figure(1);
while true
    
    k = 1;
    
    for i=1:size(points, 1)-2

     if points(i, 3) ~= 1
        x1 = points(i, 1)+1;
        y1 = points(i, 2);

        x2 = points(i+1, 1);
        y2 = points(i+1, 2);

        x3 = points(i+2, 1);
        y3 = points(i+2, 2);

        ls1 = (sqrt((x1-x2)^2+(y1-y2)^2));
        ls2 = (sqrt((x2-x3)^2+(y2-y3)^2));
        
        ang = ( (((x3-x2)*(x1-x2)) + ((y3-y2)*(y1-y2))) / (sqrt((x1-x2)^2+(y1-y2)^2)*(sqrt((x2-x3)^2+(y2-y3)^2))) );
        b = acos( (((x3-x2)*(x1-x2)) + ((y3-y2)*(y1-y2))) / (sqrt((x1-x2)^2+(y1-y2)^2)*(sqrt((x2-x3)^2+(y2-y3)^2))) );

        kink = ((b * ls1 * ls2)/(ls1 + ls2));
               
        finalPoints(k, 1) = x1;
        finalPoints(k, 2) = y1;
        finalPoints(k, 3) = x2;
        finalPoints(k, 4) = y2;
        finalPoints(k, 5) = x3;
        finalPoints(k, 6) = y3;
        finalPoints(k, 7) = kink;
        finalPoints(k, 8) = (ls1);
        finalPoints(k, 9) = (ls2);
        finalPoints(k, 10) = (b);
        finalPoints(k, 11) = (ang);
        finalPoints(k, 12) = kink;
        k = k+ 1;
    end
    end
       
    min = minIndex(finalPoints, points);
    points(min, 3) = 1;
    
    k = 1;
    for i = 1 : size(points, 1)

        if points(i, 3) ~= 1
            nPoints(k, 1) = points(i, 1);
            nPoints(k, 2) = points(i, 2);
            nPoints(k, 3) = points(i, 3);
            k = k+1;
        end

    end
    
    clearvars points;
    points = nPoints;
    clearvars nPoints;
    nFinalPoints = finalPoints;
    clearvars finalPoints;
    
    pause(0.01);
    plot(points(:, 1), points(:, 2),'b-*');
    axis([0 255 0 1]); 
    frame = getframe(gca);
    aviobj = addframe(aviobj,frame);
    if ( size(points, 1) == 5 )
        break;
    end
    it = it+1;
end
aviobj = close(aviobj);

V1  = assignLebel3(I, points);
imhist(I);
hold on;
for i = 2 : length(points)-1
    stem(points(i,1), 700, '-g','fill');
end
h(1) = stem(points(i,1), 700, '-g','fill');


% th = multithresh(I, 3);
% T(2:4) = th;
% T(5) = 255;
% V2  = assignLebel3(I, T);

% hold on;
% for i = 2 : length(T)-1
%     stem(T(1,i), 700, '-r','fill');
% end
% h(2) = stem(T(1,2), 700, '-r','fill');
% legend([h(1), h(2)], 'DCE detected significant points', 'Thresholds generated by multilevel Otsu');

% n = 5;
% T = points(:, 1).';
% T(1) = 1;
% it = 1;
% while true
%     if it >= 10
%         break;
%     end
%     optimizedT = EntropyThresholding(T, I);
%     dif = abs(optimizedT - T);
%     s = sum(dif);
%     T = optimizedT;
%     if s < (n-2) * 3
%         break;
%     end
%     it = it + 1;
% end
%     %% 
% 
%     %% 
% 
% V1  = assignLebel3(I, T);
% 
% 
% OT = EntropyThresholding3Mex(I, h);
% 
% nT(1)=1;
% nT(5)=255;
% nT(2:4)=OT;
% V2  = assignLebel3(I, nT);
% 
% 
% 
% hold on;
% for i = 2 : length(points)-1
%     stem(points(i,1), 7000, '-r','fill');
% end
% 
% h(1) = stem(points(i,1), 7000, '-r','fill');
% 
% for i = 2 : length(points)-1
%     stem(T(1,i), 5000, '-g', 'fill', 'MarkerFaceColor','green','Marker','square');
% end
%  h(2) = stem(T(1,i), 5000, '-g', 'fill', 'MarkerFaceColor','green','Marker','square');
%  
% for i = 1 : length(OT)
%     stem(OT(1,i), 6000, '-k', 'fill');
% end
%  h(3) = stem(OT(1,1), 6000, '-k', 'fill');
 
% title('Detected thresholds using Otsu''s BCV criteria' );
% xlabel('Intensity value');
% ylabel('Frequency') ;
% axis([0 255 0 10000]); 
% 
% legend([h(1), h(2), h(3)], 'DCE detected significant points', 'Detected Thresholds by proposed method using Otsu', 'Thresholds generated by multilevel Otsu');
% 
% % hold off;
% % figure; imshow(V1);
% % figure; imshow(V2);
% 
